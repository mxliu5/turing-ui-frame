import{_ as s,o as a,c as i,aQ as e}from"./chunks/framework.CDHCSj6k.js";const c=JSON.parse('{"title":"table-page组件","description":"","frontmatter":{},"headers":[],"relativePath":"components/table-page/base.md","filePath":"components/table-page/base.md","lastUpdated":1735282790000}'),d={name:"components/table-page/base.md"};function l(n,t,p,h,o,k){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="table-page组件" tabindex="-1">table-page组件 <a class="header-anchor" href="#table-page组件" aria-label="Permalink to &quot;table-page组件&quot;">​</a></h1><h3 id="组件说明" tabindex="-1">组件说明 <a class="header-anchor" href="#组件说明" aria-label="Permalink to &quot;组件说明&quot;">​</a></h3><ol><li><code>table-page</code>组件是用来实现一个表格交互的列表页，它通常是由<code>查询栏、操作栏、表格栏、分页栏</code>共同组成</li><li>组件内容是由<code>tu-query</code>(查询组件)、<code>my-operation</code>(操作栏组件)、<code>tu-table</code>(表格组件)、<code>my-pagination</code>(分页组件)四个组件共同组件</li><li>表格的高度根据页面计算而来，表格高度 = 页面总高 - （查询栏高度 + 操作栏高度 + 分页栏高度）,前提条件需要将使用table-page组件的父元素高度设置为100%，这样能够保证表格的高度始终自适应，表头固定，列表内容滚动条展示</li></ol><h3 id="使用指南" tabindex="-1">使用指南 <a class="header-anchor" href="#使用指南" aria-label="Permalink to &quot;使用指南&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mock-list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table-page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tableData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tableData</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">columns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">operations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operations</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table-page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.app-list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>具体使用可参考<code>@/view/mock-demo/list</code>中代码</p></div><h3 id="tablepage属性" tabindex="-1">TablePage属性 <a class="header-anchor" href="#tablepage属性" aria-label="Permalink to &quot;TablePage属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性名</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>withQuery</td><td>是否有查询栏</td><td><code>boolean</code></td><td>true</td></tr><tr><td>query</td><td>所有查询项绑定的值集合</td><td><code>object</code></td><td>{}</td></tr><tr><td>queryItems</td><td>查询项的集合</td><td><code>object</code></td><td>见<code>tu-query</code></td></tr><tr><td>queryAttrs</td><td><code>tu-query</code>支持的所有其它属性</td><td><code>object</code></td><td>见<code>tu-query</code></td></tr><tr><td>withOperation</td><td>是否有操作栏</td><td><code>boolean</code></td><td>false</td></tr><tr><td>operationAttrs</td><td><code>my-operation</code>的属性</td><td><code>object</code></td><td>见<code>my-operation</code></td></tr><tr><td>columns</td><td>表格项集合</td><td><code>array</code></td><td>见<code>tu-table</code></td></tr><tr><td>operations</td><td>表格操作项集合</td><td><code>array</code></td><td>见<code>tu-table</code></td></tr><tr><td>withOrder</td><td>是否显示序号</td><td><code>boolean</code></td><td>true</td></tr><tr><td>orderOption</td><td>序号的相关配置</td><td><code>object</code></td><td>见<code>tu-table</code></td></tr><tr><td>withSelection</td><td>是否显示多选框</td><td><code>boolean</code></td><td>false</td></tr><tr><td>selectionOption</td><td>多选框的相关配置</td><td><code>object</code></td><td>见<code>tu-table</code></td></tr><tr><td>draggable</td><td>是否支持行拖拽</td><td><code>boolean</code></td><td>false</td></tr><tr><td>draggableOption</td><td>拖拽的相关配置</td><td><code>object</code></td><td>见<code>tu-table</code></td></tr><tr><td>noText</td><td>单元格数据为空时占位符</td><td><code>string</code></td><td>&#39;-&#39;</td></tr><tr><td>tableAttrs</td><td>更多的<code>el-table</code>支持的属性通过tableAttrs传即可</td><td><code>object</code></td><td>见<code>el-table</code></td></tr><tr><td>loadDataApi</td><td>列表接口api</td><td><code>function</code></td><td>-</td></tr><tr><td>loadImmediately</td><td>是否立即查询，有些查询需要父组件自行去操作，可以传参false;</td><td><code>boolean</code></td><td>true</td></tr><tr><td>transformQuery</td><td>处理查询项请求参数，将tu-query绑定值转换成后端接口需要的格式</td><td><code>function</code></td><td>-</td></tr><tr><td>transformListData</td><td>加载完数据之后，对数据的转换逻辑,将接口返回的数据转换成页面需要的形式</td><td><code>function</code></td><td>-</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><h5 style="margin:10px 0;"> 1. 为何如此设计？为何不直接在list页面直接使用tu-query、my-operation、tu-table、my-pagenation写，而是又封装了一层？ </h5><ol><li><p>可以节省写代码的时间，例如表格高度需要根据当前屏幕高度去计算。封装一层直接将计算的逻辑在table-page中实现，就不用每写一次list页面都去实现一遍</p></li><li><p>方便维护，在实际项目中，列表页的交互后期需求可能会发生改变，例如查询栏和操作栏的位置，交互等。这样后期有改动只需要改动table-page组件就能很快适配需求改动</p></li><li><p>另外一个项目的列表页通常都是有一样的交互，统一引用table-page组件，避免不同的页面开发出不同的风格（尤其是在前端开发者较多的情况下）</p></li></ol><h5 style="margin:10px 0;"> 2. 实际开发 </h5><ol><li><p>实际开发时逻辑根据实际项目去做调整，这里封装的只是一个通用版本的逻辑</p></li><li><p>开发之前请先阅读table-page代码逻辑，根据实际情况去做调整。代码比较简洁，代码配合组件说明文档一起更好理解</p></li></ol></div>`,9)]))}const E=s(d,[["render",l]]);export{c as __pageData,E as default};
